#include <stdio.h>
#include <stdlib.h>

// Define the node structure for Circular Linked List
typedef struct Node {
    int data;
    struct Node* next;
} NODE;

// Function to insert a node at the end of the circular linked list
NODE* insertEnd(NODE* head, int data) {
    NODE* newNode = (NODE*)malloc(sizeof(NODE));
    newNode->data = data;
    newNode->next = newNode;  // New node points to itself (circular)

    if (head == NULL) {
        return newNode;
    } else {
        NODE* temp = head;
        while (temp->next != head) {
            temp = temp->next;
        }
        temp->next = newNode;
        newNode->next = head;  // Maintain circular link
    }
    return head;
}

// Function to display the circular linked list
void displayList(NODE* head) {
    if (head == NULL) {
        printf("Circular Linked List is empty\n");
        return;
    }
    NODE* temp = head;
    do {
        printf("%d ", temp->data);
        temp = temp->next;
    } while (temp != head);
    printf("\n");
}

// Function to concatenate two circular linked lists
NODE* concatenateLists(NODE* head1, NODE* head2) {
    if (head1 == NULL && head2 == NULL) {
        printf("Nothing to concatenate\n");
        return NULL;
    }
    if (head1 == NULL) return head2;
    if (head2 == NULL) return head1;

    NODE* temp1 = head1;
    while (temp1->next != head1) {
        temp1 = temp1->next;
    }

    NODE* temp2 = head2;
    while (temp2->next != head2) {
        temp2 = temp2->next;
    }

    // Concatenate by adjusting the links
    temp1->next = head2;
    temp2->next = head1;

    return head1;  // Return the new concatenated list starting from head1
}

// Main function to manage menu-driven operations
int main() {
    NODE* head1 = NULL;
    NODE* head2 = NULL;
    int choice, data;

    do {
       
        printf("1. Create Circular Linked List 1\n");
        printf("2. Create Circular Linked List 2\n");
        printf("3. Display Circular Linked List 1\n");
        printf("4. Display Circular Linked List 2\n");
        printf("5. Concatenate Lists\n");
        printf("6. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter data to insert into List 1 (-1 to stop): ");
                while (1) {
                    scanf("%d", &data);
                    if (data == -1) break;
                    head1 = insertEnd(head1, data);
                }
                break;

            case 2:
                printf("Enter data to insert into List 2 (-1 to stop): ");
                while (1) {
                    scanf("%d", &data);
                    if (data == -1) break;
                    head2 = insertEnd(head2, data);
                }
                break;

            case 3:
                printf("Circular Linked List 1: ");
                displayList(head1);
                break;

            case 4:
                printf("Circular Linked List 2: ");
                displayList(head2);
                break;

            case 5:
                head1 = concatenateLists(head1, head2);
                if (head1 != NULL) {
                    printf("Lists concatenated.\n");
                }
                break;

            case 6:
                printf("Exiting\n");
                break;

            default:
                printf("Invalid choice\n");
        }
    } while (choice != 6);

    return 0;
}
